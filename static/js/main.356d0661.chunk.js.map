{"version":3,"sources":["components/landingpage.js","components/foodpage.js","components/projectspage.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","style","width","margin","className","col","Component","Food","Projects","Main","exact","path","component","LandingPage","AboutMe","FoodPage","Project","App","height","position","fixedHeader","title","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAwBeA,E,iLAlBP,OACI,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChC,kBAAC,OAAD,CAAMC,UAAU,gBACZ,kBAAC,OAAD,CAAMC,IAAK,IACP,yBAAKD,UAAY,eACb,qE,GAPNE,a,iBCSPC,E,iLARP,OACI,6BAAK,8C,GAHED,aCSJE,E,iLAPP,OACI,6BAAK,kD,GAHMF,aCiBRG,EATF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAaC,IACnC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,eAAeC,UAAaE,MAC9C,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,YAAYC,UAAaG,IAC3C,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,gBAAgBC,UAAaI,MCoBxCC,MA/Bf,WACE,OACE,yBAAKhB,MAAO,CAACiB,OAAQ,QAASC,SAAU,aACpC,kBAAC,SAAD,CAAQC,aAAW,GACf,kBAAC,SAAD,CAAQC,MAAM,YACV,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,iBAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,WAKN,kBAAC,SAAD,CAAQD,MAAM,SACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,iBAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,WAGR,kBAAC,UAAD,KACE,yBAAKlB,UAAU,iBACf,kBAAC,EAAD,UCfMmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.356d0661.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\n\r\nclass Landing extends Component{\r\n    render() {\r\n        return(\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Grid className='landing-grid'>\r\n                    <Cell col={12}>\r\n                        <div className = \"banner-text\">\r\n                            <h1>Hello! Welcome to my website.</h1>\r\n\r\n                        </div>\r\n                    </Cell>\r\n                    \r\n\r\n                </Grid>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Food extends Component{\r\n    render() {\r\n        return(\r\n            <div><h1>Food Blog</h1></div>\r\n            //<p>Not until I moved out to college, I ate out, both fast food and restaurant. Here, I want to talk about my experiences.</p>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Food;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Projects extends Component{\r\n    render() {\r\n        return(\r\n            <div><h1>Projects Page</h1></div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\n//Main pages\r\nimport LandingPage from './landingpage';\r\nimport AboutMe from './aboutmepage';\r\nimport FoodPage from  './foodpage';\r\nimport Project from './projectspage';\r\n\r\n\r\n\r\nconst Main = () => (\r\n    <Switch>\r\n        <Route exact path='/' component = {LandingPage}/>\r\n        <Route exact path='/aboutmepage' component = {AboutMe}/>\r\n        <Route exact path='/foodpage' component = {FoodPage}/>\r\n        <Route exact path='/projectspage' component = {Project}/>\r\n    </Switch>\r\n)\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport {Layout, Header, Textfield, Drawer, Navigation, Content} from 'react-mdl';\nimport {Link} from 'react-router-dom';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div style={{height: '300px', position: 'relative'}}>\n        <Layout fixedHeader>\n            <Header title=\"Homepage\">\n                <Navigation>\n                  <Link to=\"/\">Homepage</Link>\n                  <Link to=\"/projectspage\">Projects</Link>\n                  <Link to=\"/foodpage\">Foods</Link>\n                </Navigation>\n\n            </Header>\n\n            <Drawer title=\"Links\">\n                <Navigation>\n                    <Link to=\"/\">Homepage</Link>\n                    <Link to=\"/projectspage\">Projects</Link>\n                    <Link to=\"/foodpage\">Foods</Link>\n                </Navigation>\n            </Drawer>\n            <Content>\n              <div className='page-content' />\n              <Main/>\n            </Content>\n\n        </Layout>\n    </div>\n  );\n  \n}\n\nexport default App;\n/*npm run deploy to update*/\n/* If I want to make a search bar\n<Textfield\n    value=\"Find Doesn't Work\"\n    onChange={() => {}}\n    label=\"Search\"\n    expandable\n    expandableIcon=\"search\"\n/>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}